from=local-test888

# JWT
jwt.header=Authorization
jwt.secret=mySecret
jwt.expiration=604800
jwt.tokenHead=Bearer 

#配置RabbitMQ的连接和用户信息
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=luyou
spring.rabbitmq.password=123456
## 刷新时，关闭安全验证
management.security.enabled=false
## 开启消息跟踪
spring.cloud.bus.trace.enabled=true

#如果服务无法连接到配置服务器 客户端将以异常停止
spring.cloud.config.failFast=true

# 数据库访问配置
# 主数据源，默认的
#spring.datasource.type=com.alibaba.druid.pool.DruidDataSource

spring.datasource.driver-class-name =com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/test?useUnicode=true&characterEncoding=utf-8&useSSL=true
spring.datasource.username= root
spring.datasource.password= 123456

#spring.jpa.properties.hibernate.hbm2ddl.auto是hibernate的配置属性，其主要作用是：自动创建、更新、验证数据库表结构。该参数的几种配置如下：
#create：每次加载hibernate时都会删除上一次的生成的表，然后根据你的model类再重新来生成新表，哪怕两次没有任何改变也要这样执行，这就是导致数据库表数据丢失的一个重要原因。
#create-drop：每次加载hibernate时根据model类生成表，但是sessionFactory一关闭,表就自动删除。
#update：最常用的属性，第一次加载hibernate时根据model类会自动建立起表的结构（前提是先建立好数据库），以后加载hibernate时根据model类自动更新表结构，即使表结构改变了但表中的行仍然存在不会删除以前的行。
#要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等应用第一次运行起来后才会。
#validate：每次加载hibernate时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。
#spring.jpa.properties.hibernate.hbm2ddl.auto=update

spring.datasource.readandwrite.url=jdbc:mysql://192.168.100.172:3306/db_spyspt?useUnicode=true&amp;characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull&amp;autoReconnect=true&amp;failOverReadOnly=false&useSSL=true
spring.datasource.readandwrite.username=root
spring.datasource.readandwrite.password=jhtSOFT1478_zgfw315
spring.datasource.readandwrite.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.readandwrite.type=com.alibaba.druid.pool.DruidDataSource

#连接池的配置信息
## 初始化大小，最小，最大
spring.datasource.readandwrite.initialSize=5
spring.datasource.readandwrite.minIdle=5
spring.datasource.readandwrite.maxActive=20
## 配置获取连接等待超时的时间
spring.datasource.readandwrite.maxWait=60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.readandwrite.timeBetweenEvictionRunsMillis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.readandwrite.minEvictableIdleTimeMillis=300000
spring.datasource.readandwrite.validationQuery=SELECT 1 FROM DUAL
spring.datasource.readandwrite.testWhileIdle=true
spring.datasource.readandwrite.testOnBorrow=false
spring.datasource.readandwrite.testOnReturn=false
spring.datasource.readandwrite.poolPreparedStatements=true
spring.datasource.readandwrite.maxPoolPreparedStatementPerConnectionSize=20
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.readandwrite.filters=stat,wall,log4j
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.readandwrite.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000

#读库连接信息
#spring.datasource.read.url=jdbc:mysql://192.168.100.173:3306/db_spyspt?useUnicode=true&amp;characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull&amp;autoReconnect=true&amp;failOverReadOnly=false
spring.datasource.read.url=jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull&amp;autoReconnect=true&amp;failOverReadOnly=false&useSSL=true
spring.datasource.read.username=root
spring.datasource.read.password=123456
spring.datasource.read.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.read.type=com.alibaba.druid.pool.DruidDataSource

#连接池的配置信息
## 初始化大小，最小，最大
spring.datasource.read.initialSize=5
spring.datasource.read.minIdle=5
spring.datasource.read.maxActive=20
## 配置获取连接等待超时的时间
spring.datasource.read.maxWait=60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.read.timeBetweenEvictionRunsMillis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.read.minEvictableIdleTimeMillis=300000
spring.datasource.read.validationQuery=SELECT 1 FROM DUAL
spring.datasource.read.testWhileIdle=true
spring.datasource.read.testOnBorrow=false
spring.datasource.read.testOnReturn=false
spring.datasource.read.poolPreparedStatements=true
spring.datasource.read.maxPoolPreparedStatementPerConnectionSize=20
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.read.filters=stat,wall,log4j
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.read.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000


spring.jpa.database=MYSQL
spring.jpa.generate-ddl=true  
#spring.jpa.database-platform=org.hibernate.dialect.MySQL5Dialect  
spring.jpa.hibernate.naming_strategy=org.hibernate.cfg.ImprovedNamingStrategy  
#spring.jpa.database=org.hibernate.dialect.MySQL5InnoDBDialect 
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect
spring.jpa.properties.hibernate.cache.region.factory_class=org.hibernate.cache.EhCacheProvider
spring.jpa.properties.hibernate.cache.use_second_level_cache=false
spring.jpa.properties.hibernate.cache.use_query_cache=false
spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=true
